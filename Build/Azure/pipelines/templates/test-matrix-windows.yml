parameters:
- name: version
  type: string
  default: ''
- name: os_version
  type: string
  default: ''
- name: experimental
  type: boolean
  default: false

#strategy:
matrix:
  SQLite:
    title: 'SQLite'
    config: 'sqlite'
    enabled: and(not(${{ parameters.experimental }}), eq(${{ parameters.os_version }}, '2016'))
  SQLite_MS:
    title: 'SQLite.MS'
    config: 'sqlite.ms'
    enabled: and(not(${{ parameters.experimental }}), eq(${{ parameters.os_version }}, '2016'))
  Access_OLEDB_JET:
    title: 'Access Jet'
    config: 'access'
    enabled: and(not(${{ parameters.experimental }}), eq(${{ parameters.os_version }}, '2019'))
  Access_OLEDB_ACE:
    title: 'Access ACE'
    config: 'access.ace'
    script: 'access.ace.cmd'
    enabled: and(not(${{ parameters.experimental }}), eq(${{ parameters.os_version }}, '2019'))
  Access_ODBC_MDB:
    title: 'Access ODBC MDB'
    config: 'access.odbc.mdb'
    enabled: and(not(${{ parameters.experimental }}), eq(${{ parameters.os_version }}, '2019'))
  Access_ODBC_ACE:
    title: 'Access ODBC ACE'
    config: 'access.odbc.ace'
    script: 'access.ace.cmd'
    enabled: and(not(${{ parameters.experimental }}), eq(${{ parameters.os_version }}, '2019'))
  Access_ODBC_ACE_x64:
    title: 'Access ODBC ACE x64'
    config: 'access.odbc.ace'
    script: 'access.ace.x64.cmd'
    enabled: and(not(${{ parameters.experimental }}), eq(${{ parameters.os_version }}, '2016'), eq(${{ parameters.version }}, '2.1'))
# disabled due to a lot of random crashes https://github.com/dotnet/runtime/issues/36954
  Access_OLEDB_ACE_x64:
    title: 'Access OleDb ACE x64'
    config: 'access.ace'
    script: 'access.ace.x64.cmd'
    enabled: and(false, eq(${{ parameters.os_version }}, '2016'), or(eq(${{ parameters.version }}, '2.1'), eq(${{ parameters.version }}, '3.1')))
  SqlCE:
    title: 'SQL CE'
    config: 'sqlce'
    psscript: 'sqlce.ps1'
    enabled: and(not(${{ parameters.experimental }}), eq(${{ parameters.os_version }}, '2016'))
# TODO: needs working docker image
  MariaDB:
    title: 'MariaDB'
    config: 'mariadb'
    script: 'mariadb.cmd'
    enabled: false
# TODO: needs working docker image
  PostgreSQL10:
    title: 'PostgreSQL 10'
    config: 'pgsql10'
    script: 'pgsql10.cmd'
    enabled: false
  SqlServer2005:
    title: 'SQL Server 2005 (System.Data.SqlClient)'
    config: 'sqlserver.2005'
    script: 'sqlserver.2005.cmd'
    enabled: and(not(${{ parameters.experimental }}), eq(${{ parameters.os_version }}, '2016'))
# disabled: too many tests
  SqlServer2005_MS:
    title: 'SQL Server 2005 (Microsoft.Data.SqlClient)'
    config: 'sqlserver.2005.ms'
    script: 'sqlserver.2005.cmd'
    enabled: and(false, eq(${{ parameters.os_version }}, '2016'))
  SqlServer2008:
    title: 'SQL Server 2008 (System.Data.SqlClient)'
    config: 'sqlserver.2008'
    script: 'sqlserver.2008.cmd'
    enabled: and(not(${{ parameters.experimental }}), eq(${{ parameters.os_version }}, '2016'))
# disabled: too many tests
  SqlServer2008_MS:
    title: 'SQL Server 2008 (Microsoft.Data.SqlClient)'
    config: 'sqlserver.2008.ms'
    script: 'sqlserver.2008.cmd'
    enabled: and(false, eq(${{ parameters.os_version }}, '2016'))
  SqlServer2012:
    title: 'SQL Server 2012 (System.Data.SqlClient)'
    config: 'sqlserver.2012'
    script: 'sqlserver.2012.cmd'
    enabled: and(not(${{ parameters.experimental }}), eq(${{ parameters.os_version }}, '2016'))
# disabled: too many tests
  SqlServer2012_MS:
    title: 'SQL Server 2012 (Microsoft.Data.SqlClient)'
    config: 'sqlserver.2012.ms'
    script: 'sqlserver.2012.cmd'
    enabled: and(false, eq(${{ parameters.os_version }}, '2016'))
  SqlServer2014:
    title: 'SQL Server 2014 (System.Data.SqlClient)'
    config: 'sqlserver.2014'
    script: 'sqlserver.2014.cmd'
    enabled: and(not(${{ parameters.experimental }}), eq(${{ parameters.os_version }}, '2016'))
# disabled: too many tests
  SqlServer2014_MS:
    title: 'SQL Server 2014 (Microsoft.Data.SqlClient)'
    config: 'sqlserver.2014.ms'
    script: 'sqlserver.2014.cmd'
    enabled: and(false, eq(${{ parameters.os_version }}, '2016'))
  SqlServer2016:
    title: 'SQL Server 2016 (System.Data.SqlClient)'
    config: 'sqlserver.2016'
    script: 'sqlserver.2016.cmd'
    enabled: and(not(${{ parameters.experimental }}), eq(${{ parameters.os_version }}, '2016'))
# disabled: too many tests
  SqlServer2016_MS:
    title: 'SQL Server 2016 (Microsoft.Data.SqlClient)'
    config: 'sqlserver.2016.ms'
    script: 'sqlserver.2016.cmd'
    enabled: and(false, eq(${{ parameters.os_version }}, '2016'))
  SqlServer2017:
    title: 'SQL Server 2017 (System.Data.SqlClient)'
    config: 'sqlserver.2017'
    script: 'sqlserver.2017.cmd'
    enabled: and(not(${{ parameters.experimental }}), eq(${{ parameters.os_version }}, '2016'))
# disabled: too many tests
  SqlServer2017_MS:
    title: 'SQL Server 2017 (Microsoft.Data.SqlClient)'
    config: 'sqlserver.2017.ms'
    script: 'sqlserver.2017.cmd'
    enabled: and(false, eq(${{ parameters.os_version }}, '2016'))
  SqlServer2019:
    title: 'SQL Server 2019 (System.Data.SqlClient)'
    config: 'sqlserver.2019'
    script: 'sqlserver.2019.cmd'
    enabled: and(not(${{ parameters.experimental }}), eq(${{ parameters.os_version }}, '2019'))
  SqlServer2019_MS:
    title: 'SQL Server 2019 (Microsoft.Data.SqlClient)'
    config: 'sqlserver.2019.ms'
    script: 'sqlserver.2019.cmd'
    enabled: and(not(${{ parameters.experimental }}), eq(${{ parameters.os_version }}, '2019'))
