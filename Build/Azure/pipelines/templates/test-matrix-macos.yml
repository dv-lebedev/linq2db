parameters:
- name: version
  type: string
  default: ''
- name: experimental
  type: boolean
  default: false

strategy:
  matrix:
    SQLite:
      title: 'SQLite'
      config: 'sqlite'
      enabled: and(not(${{ parameters.experimental }}), eq(${{ parameters.version }}, '2.1'))
    SQLite_MS:
      title: 'SQLite.MS'
      config: 'sqlite.ms'
      enabled: and(not(${{ parameters.experimental }}), eq(${{ parameters.version }}, '2.1'))
# SqlServer 2017 temporary disabled due to stack overflow exception during test run. needs investigation
    SqlServer2017:
      title: 'SQL Server 2017 (System.Data.SqlClient)'
      config: 'sqlserver.fts.2017'
      script: 'mac.sqlserver.2017.sh'
      docker: true
      enabled: false
    SqlServer2017_MS:
      title: 'SQL Server 2017 (Microsoft.Data.SqlClient)'
      config: 'sqlserver.fts.2017'
      script: 'mac.sqlserver.2017.sh'
      docker: true
      enabled: false
    SqlServer2019:
      title: 'SQL Server 2019 (System.Data.SqlClient)'
      config: 'sqlserver.fts.2019'
      script: 'mac.sqlserver.2019.sh'
      docker: true
      enabled: and(not(${{ parameters.experimental }}), eq(${{ parameters.version }}, '2.1'))
    SqlServer2019_MS:
      title: 'SQL Server 2019 (Microsoft.Data.SqlClient)'
      config: 'sqlserver.fts.2019.ms'
      script: 'mac.sqlserver.2019.sh'
      docker: true
      enabled: and(not(${{ parameters.experimental }}), eq(${{ parameters.version }}, '2.1'))
    MySQL:
      title: 'MySQL'
      config: 'mysql'
      script: 'mac.mysql.sh'
      docker: true
      enabled: not(${{ parameters.experimental }})
    MySQL55:
      title: 'MySQL 5.5'
      config: 'mysql55'
      script: 'mac.mysql55.sh'
      docker: true
      enabled: and(not(${{ parameters.experimental }}), eq(${{ parameters.version }}, '2.1'))
    MariaDB:
      title: 'MariaDB'
      config: 'mariadb'
      script: 'mac.mariadb.sh'
      docker: true
      enabled: and(not(${{ parameters.experimental }}), eq(${{ parameters.version }}, '2.1'))
    PostgreSQL:
      title: 'PostgreSQL'
      config: 'pgsql'
      script: 'mac.pgsql.sh'
      docker: true
      enabled: not(${{ parameters.experimental }})
    PostgreSQL92:
      title: 'PostgreSQL 9.2'
      config: 'pgsql92'
      script: 'mac.pgsql92.sh'
      docker: true
      enabled: and(not(${{ parameters.experimental }}), eq(${{ parameters.version }}, '2.1'))
    PostgreSQL93:
      title: 'PostgreSQL 9.3'
      config: 'pgsql93'
      script: 'mac.pgsql93.sh'
      docker: true
      enabled: and(not(${{ parameters.experimental }}), eq(${{ parameters.version }}, '2.1'))
    PostgreSQL95:
      title: 'PostgreSQL 9.5'
      config: 'pgsql95'
      script: 'mac.pgsql95.sh'
      docker: true
      enabled: and(not(${{ parameters.experimental }}), eq(${{ parameters.version }}, '2.1'))
    PostgreSQL10:
      title: 'PostgreSQL 10'
      config: 'pgsql10'
      script: 'mac.pgsql10.sh'
      docker: true
      enabled: and(not(${{ parameters.experimental }}), eq(${{ parameters.version }}, '2.1'))
    PostgreSQL11:
      title: 'PostgreSQL 11'
      config: 'pgsql11'
      script: 'mac.pgsql11.sh'
      docker: true
      enabled: and(not(${{ parameters.experimental }}), eq(${{ parameters.version }}, '2.1'))
    Sybase:
      title: 'Sybase ASE 16'
      config: 'sybase'
      script: 'sybase.sh'
      docker: true
      enabled: and(not(${{ parameters.experimental }}), eq(${{ parameters.version }}, '2.1'))
    Oracle11:
      title: 'Oracle 11g XE'
      config: 'oracle11'
      script: 'oracle11.sh'
      docker: true
      enabled: and(not(${{ parameters.experimental }}), eq(${{ parameters.version }}, '2.1'))
    Oracle12:
      title: 'Oracle 12c'
      config: 'oracle12'
      script: 'oracle12.sh'
      docker: true
      enabled: and(not(${{ parameters.experimental }}), eq(${{ parameters.version }}, '2.1'))
    Firebird25:
      title: 'Firebird 2.5'
      config: 'firebird25'
      script: 'firebird25.sh'
      docker: true
      enabled: and(not(${{ parameters.experimental }}), eq(${{ parameters.version }}, '2.1'))
    Firebird3:
      title: 'Firebird 3.0'
      config: 'firebird3'
      script: 'firebird3.sh'
      docker: true
      enabled: and(not(${{ parameters.experimental }}), eq(${{ parameters.version }}, '2.1'))
    Informix14:
      title: 'Informix 14.10'
      config: 'informix'
      script: 'mac.informix14.sh'
      docker: true
      nuget: 'IBM.Data.DB2.Core-osx -Version 2.0.0.100'
      enabled: and(not(${{ parameters.experimental }}), eq(${{ parameters.version }}, '2.1'))
    DB2:
      title: 'DB2 LUW 11.5'
      config: 'db2'
      script: 'mac.db2.sh'
      docker: true
      nuget: 'IBM.Data.DB2.Core-osx -Version 2.0.0.100'
      enabled: and(not(${{ parameters.experimental }}), eq(${{ parameters.version }}, '2.1'))
# needs working docker image
    Informix12:
      title: 'Informix 12.10'
      config: 'informix'
      script: 'mac.informix12.sh'
      docker: 'true'
      nuget: 'IBM.Data.DB2.Core-osx -Version 2.0.0.100'
      enabled: false
# needs working docker image
    SAPHANA2:
      title: 'SAP HANA 2 SPS 04r40'
      config: 'hana2'
      script: 'mac.hana2.sh'
      docker: 'true'
      docker_login: 'true'
      enabled: false
